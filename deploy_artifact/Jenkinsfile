pipeline {
    agent { label 'agent2' }

    stages {
        stage('Checkout SCM') {
            steps {
                echo 'Cloning the Git repository...'
                checkout scm
            }
        }

        stage('Check and Install Docker') {
            steps {
                script {
                    echo 'Checking if Docker is installed...'
                    if (sh(script: 'command -v docker', returnStatus: true) != 0) {
                        echo 'Docker is not installed. Installing...'
                        sh '''
                            sudo apt-get update
                            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
                              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                            sudo apt-get update
                            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                            sudo systemctl start docker
                            sudo systemctl enable docker
                            sudo docker run hello-world # Verification
                        '''
                    } else {
                        echo 'Docker is already installed.'
                    }
                }
            }
        }

        stage('Install Docker Compose') {
            steps {
                script {
                    echo 'Installing Docker Compose...'
                    sh '''
                        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                    '''
                }
            }
        }

        stage('Find Artifact') {
            steps {
                script {
                    def zipFiles = findFiles(glob: '*.zip')
                    if (zipFiles.length > 0) {
                        env.ZIP_FILE_NAME = zipFiles[0].name
                        echo "Found artifact: ${env.ZIP_FILE_NAME}"
                    } else {
                        error("No artifact found!")
                    }
                }
            }
        }

        stage('Extract Artifact') {
            steps {
                script {
                    def extractScript = "./BASH/extract"

                    if (fileExists(extractScript)) {
                        sh "chmod +x ${extractScript}"
                        def extractionStatus = sh(script: "${extractScript} -r ${env.ZIP_FILE_NAME}", returnStatus: true)
                        if (extractionStatus != 0) {
                            error("Extraction failed!")
                        }
                    } else {
                        error("Extract script not found: ${extractScript}")
                    }
                }
            }
        }

        stage('Ansible Deploy') {
            steps {
                script {
                    // Get the folder name dynamically
                    env.foldername = sh(script: "basename $(pwd)", returnStdout: true).trim()

                    echo "Deploying Ansible Playbook in folder: ${env.foldername}"

                    if (fileExists(env.foldername)) {
                        def ansibleStatus = sh(script: "ansible-playbook ${env.foldername}", returnStatus: true)
                        if (ansibleStatus != 0) {
                            error("Ansible deployment failed!")
                        }
                    } else {
                        error("Ansible playbook not found: ${env.foldername}")
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for more information.'
        }
    }
}

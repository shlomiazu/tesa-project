@Library('build_an_artifact@main') _  // Import the shared library for `prepareEnv`

pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/shlomiazu/tesa-project'  // Git repository URL
        BRANCH = 'master'  // Target branch
        DOCKER_IMAGE = 'shlomiaz/web-app'  // Docker Hub image name
        DOCKER_TAG = 'latest'  // Docker image tag
    }

    triggers {
        // Trigger the pipeline on SCM change
        pollSCM('* * * * *')  // Polling every minute for changes
    }

    stages {
        stage('Good Luck') {
            steps {
                echo 'Good luck with the pipeline! âœ¨'
            }
        }

        stage('Checkout SCM') {
            steps {
                echo 'Cloning the Git repository...'
                checkout scm
            }
        }

        stage('Prepare Environment') {
            steps {
                script {
                    // Pass SCM details to the shared library function
                    def scmDetails = prepareEnv(scm: [
                        GIT_COMMIT: env.GIT_COMMIT,
                        GIT_AUTHOR_NAME: env.GIT_AUTHOR_NAME,
                        GIT_COMMITTER_MESSAGE: env.GIT_COMMITTER_MESSAGE,
                        GIT_BRANCH: env.GIT_BRANCH
                    ])
                    echo "SCM Details: ${scmDetails}"
                }
            }
        }

        stage('Install Docker Compose') {
            steps {
                script {
                    echo 'Installing Docker Compose...'
                    sh '''
                        sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
                        sudo chmod +x /usr/local/bin/docker-compose
                    '''
                }
            }
        }

        stage('Fix apt Sources') {
            steps {
                script {
                    echo 'Removing invalid PPA sources...'
                    sh '''
                        echo "127.0.0.1 $(hostname)" | sudo tee -a /etc/hosts
                        sudo sed -i '/landscape\\/landscape-api/d' /etc/apt/sources.list /etc/apt/sources.list.d/*.list
                        sudo apt-get update
                    '''
                }
            }
        }

        stage('Install Zip (Ubuntu Only)') {
            steps {
                echo 'Ensuring zip utility is installed on Ubuntu...'
                sh '''
                    # Check if zip is already installed
                    if ! command -v zip > /dev/null; then
                        echo "Installing zip utility on Ubuntu..."
                        sudo apt-get update
                        sudo apt-get install -y zip
                    else
                        echo "Zip is already installed."
                    fi
                '''
            }
        }

        stage('Build Application') {
            steps {
                echo 'Building the application...'
                sh 'docker-compose -f build_an_artifact/app/docker-compose.yml build web'
            }
        }

        stage('Package Artifact') {
            steps {
                echo 'Packaging application into a ZIP file...'
                sh '''
                    BUILD_DIR="docker-build-output"
                    ZIP_FILE="docker-build-artifact.zip"

                    mkdir -p ${BUILD_DIR}
                    cp -r build_an_artifact/app/* ${BUILD_DIR}
                    zip -r ${ZIP_FILE} ${BUILD_DIR}
                    rm -rf ${BUILD_DIR}
                '''
                echo "Artifact packaged as docker-build-artifact.zip"
            }
        }

        stage('Push Changes to Git') {
            steps {
                script {
                    echo 'Pushing changes to Git repository...'

                    // Ensure the GitHub token is available from Jenkins credentials
                    withCredentials([string(credentialsId: 'shlomi_git', variable: 'SHLOMI_GIT_TOKEN')]) {
                        sh '''
                            # Configure git with user details
                            git config --global user.name "shlomiaz"
                            git config --global user.email "shlomi.a82@gamil.com"
                            git remote set-url origin https://shlomiazu:${SHLOMI_GIT_TOKEN}@github.com/shlomiazu/tesa-project.git

                            # Add and commit changes
                            git add .
                            git commit -m "Automated commit from Jenkins pipeline"
                            git push -f origin main  # Make sure force push is necessary here
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for more information.'
        }
    }
}

